/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.krzz.tareaspendientes;

import java.awt.Point;
import java.awt.event.*;
import java.io.*;
import java.util.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.JTable;
import javax.swing.SwingUtilities;

/**
 *
 * @author crisa
 */
public final class TareasPendientes extends javax.swing.JFrame {
    // Variables para almacenar la ruta de nuestro archivo de texto
    private final String ruta = System.getProperties().getProperty("user.dir");
    File archivo = new File(ruta + "//TAREAS.txt");
    
    // Variables para el mensaje de notificacion
    public static String mensaje;
    public String xd;
    Notificacion notificar = new Notificacion();

    /**
     * Creates new form TareasPendientes
     */
    public TareasPendientes() {
        initComponents();        
        loadFile(archivo, jTablePendientes, jTableCompletadas); // Cargamos las tablas con el archivo de texto
        // Cargamos las funciones para poder seleccionar las filas del jtable
        transferDataCompleted();
        transferDataPending();
        
        // iniciamos la funcion para la notificacion, se manda cada 30s
        startNotifications(30000); // 30000ms = 30s
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTxtTarea = new javax.swing.JTextField();
        jCboEstado = new javax.swing.JComboBox<>();
        jBtnIngresar = new javax.swing.JButton();
        jBtnActualizar = new javax.swing.JButton();
        jBtnNuevo = new javax.swing.JButton();
        JBtnEliminar = new javax.swing.JButton();
        jBtnSalir = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTablePendientes = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableCompletadas = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Gestionar las Tareas"));

        jLabel1.setText("Ingresa tu tarea:");

        jLabel3.setText("Estado:");

        jCboEstado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--SELECCIONAR--", "Completa", "Pendiente" }));
        jCboEstado.setToolTipText("");

        jBtnIngresar.setText("Ingresar");
        jBtnIngresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnIngresarActionPerformed(evt);
            }
        });

        jBtnActualizar.setText("Actualizar");
        jBtnActualizar.setEnabled(false);
        jBtnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnActualizarActionPerformed(evt);
            }
        });

        jBtnNuevo.setText("Nuevo");
        jBtnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnNuevoActionPerformed(evt);
            }
        });

        JBtnEliminar.setText("Eliminar");
        JBtnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBtnEliminarActionPerformed(evt);
            }
        });

        jBtnSalir.setText("Salir");
        jBtnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTxtTarea, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCboEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(jBtnIngresar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtnActualizar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtnNuevo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JBtnEliminar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtnSalir)))
                .addContainerGap(46, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTxtTarea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCboEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBtnIngresar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtnActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtnNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JBtnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Tareas Pendientes"));

        jTablePendientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Tarea", "Estado"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTablePendientes);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Tareas Completadas"));

        jTableCompletadas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Tarea", "Estado"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTableCompletadas);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 477, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    // Boton de Ingresar
    private void jBtnIngresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnIngresarActionPerformed
        // Comparamos si el valor del cbo de estado es seleccionar, si lo es, nos avisa
        if (jCboEstado.getSelectedItem() == "--SELECCIONAR--") {
            JOptionPane.showMessageDialog(null, "Debes ingresar un estado diferente a seleccionar.", "Error", JOptionPane.OK_OPTION);
        } else {
            //si no, guarda el archivo, carga de nuevo las tablas y limpia
            writeData(archivo);
            loadFile(archivo, jTablePendientes, jTableCompletadas);
            clear();
        }
    }//GEN-LAST:event_jBtnIngresarActionPerformed

    // Boton de Actualizar
    private void jBtnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnActualizarActionPerformed
        // Comparamos si el valor del cbo de estado es seleccionar, si lo es, nos avisa
        if (jCboEstado.getSelectedItem() == "--SELECCIONAR--") {
            JOptionPane.showMessageDialog(null, "Debes ingresar un estado diferente a seleccionar.", "Error", JOptionPane.OK_OPTION);
        } else {
            // si no, nos pregunta si queremos actualizar los datos
            if (JOptionPane.showConfirmDialog(null, "¿Seguro que quieres editar este item?", "Editar", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE) == JOptionPane.YES_OPTION) {
                // actualizamos los datos, cargamos las tablas y limpiamos
                updateData(archivo, jTxtTarea.getText());
                loadFile(archivo, jTablePendientes, jTableCompletadas);
                clear();
            }
        }
    }//GEN-LAST:event_jBtnActualizarActionPerformed

    // Boton de Eliminar
    private void JBtnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBtnEliminarActionPerformed
        // Nos pregunta si queremos eliminar los datos
        if (JOptionPane.showConfirmDialog(null, "¿Seguro que quieres eliminar este item?", "Eliminar", JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE) == JOptionPane.YES_OPTION) {
            // en caso de ser si, elimina el dato que seleccionamos, cargamos las tablas y limpiamos
            deleteData(archivo);
            loadFile(archivo, jTablePendientes, jTableCompletadas);
            clear();
        }
    }//GEN-LAST:event_JBtnEliminarActionPerformed

    // Boton nuevo
    private void jBtnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnNuevoActionPerformed
        clear(); // Limpia los campos
    }//GEN-LAST:event_jBtnNuevoActionPerformed

    // Boton de Salir
    private void jBtnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnSalirActionPerformed
        // Nos pregunta si queremos cerrar el programa
        if (JOptionPane.showConfirmDialog(null, "¿Seguro que quieres salir?", "Salir", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    }//GEN-LAST:event_jBtnSalirActionPerformed

    // Funcion para cargar el archivo de texto a las tablas.
    public static void loadFile(File archivo, JTable jTablePendientes, JTable jTableCompletadas) {
        // Obtenemos el modelo de las tablas Pendientes y Completadas
        DefaultTableModel modelPendientes = (DefaultTableModel) jTablePendientes.getModel();
        DefaultTableModel modelCompletadas = (DefaultTableModel) jTableCompletadas.getModel();

        // Limpiar el contenido existente de las JTables
        modelPendientes.setRowCount(0);
        modelCompletadas.setRowCount(0);

        // try catch para poder leer el archivo
        try (BufferedReader br = new BufferedReader(new FileReader(archivo))) {
            String line; // variable para almacenar las lineas del archivo
            while ((line = br.readLine()) != null) {
                String[] data = line.split(","); // usamos la , como separador para saber a que columna debe ir cada dato
                if (data.length >= 2) { // Nos aseguramos que la columna estado existe
                    String estado = data[1].trim(); // Suponiendo que el estado está en la tercera columna
                    if ("Pendiente".equals(estado)) { // Si el estdo es pendiente, agregamos los datos a la tabla pendientes
                        modelPendientes.addRow(data);
                    } else if ("Completa".equals(estado)) { // Si el estdo es completa, agregamos los datos a la tabla completas
                        modelCompletadas.addRow(data);
                    }
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error leyendo el archivo: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    // Funcion para poder guardar los datos en el archivo txt
    private void writeData(File archivo) {
        // intentamos guardar los datos en el archivo
        try (FileWriter escritura = new FileWriter(archivo, true)) {
            // Obtenemos los valores de los textfields
            String tarea = jTxtTarea.getText();
            String estado = jCboEstado.getSelectedItem().toString();
            
            // concatenamos y guardamos
            escritura.write(tarea + "," + estado + "\n"); // Agrega un salto de línea para agregar mas datos
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error leyendo el archivo: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    // Funcion para actualizar los datos
    public void updateData(File archivo, String valorPrimeraColumna) {
        List<String> lineas = new ArrayList<>();

        // Leer el archivo y cargar los datos en la lista
        try (BufferedReader br = new BufferedReader(new FileReader(archivo))) {
            String linea;
            while ((linea = br.readLine()) != null) {
                lineas.add(linea);
            }
        } catch (IOException e) {
            e.printStackTrace();
            return;
        }

        // Obtener los nuevos datos desde tus componentes
        String nuevaLinea = jTxtTarea.getText() + "," + jCboEstado.getSelectedItem().toString(); // Nueva línea completa

        // Buscar y actualizar el dato deseado
        for (int i = 0; i < lineas.size(); i++) {
            String[] partes = lineas.get(i).split(","); // Suponiendo que tus datos están separados por comas
            if (partes.length > 0 && partes[0].equals(valorPrimeraColumna)) {
                // Actualizar la línea completa
                lineas.set(i, nuevaLinea);
                break; // Termina la búsqueda una vez que se actualiza la línea
            }
        }

        // Escribir los datos actualizados de vuelta al archivo
        try (BufferedWriter bw = new BufferedWriter(new FileWriter(archivo))) {
            for (String linea : lineas) {
                bw.write(linea);
                bw.newLine();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // Funcion para poder eliminar un dato
    public void deleteData(File archivo) {
        String valorPrimeraColumna = jTxtTarea.getText(); // Obtener el valor del JTextField
        List<String> lineas = new ArrayList<>();

        // Leer el archivo y cargar los datos en la lista
        try (BufferedReader br = new BufferedReader(new FileReader(archivo))) {
            String linea;
            while ((linea = br.readLine()) != null) {
                String[] partes = linea.split(","); // Suponiendo que tus datos están separados por comas
                if (!partes[0].equals(valorPrimeraColumna)) {
                    // Agrega la línea a la lista si el valor de la primera columna no coincide
                    lineas.add(linea);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
            return;
        }

        // Escribir los datos actualizados de vuelta al archivo
        try (BufferedWriter bw = new BufferedWriter(new FileWriter(archivo))) {
            for (String linea : lineas) {
                bw.write(linea);
                bw.newLine();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // Funcion para poder limpiar los campos y reiniciar estados
    public void clear() {
        jTxtTarea.setText("");
        jCboEstado.setSelectedIndex(0);
        jBtnActualizar.setEnabled(false);
        jBtnIngresar.setEnabled(true);
        jTxtTarea.requestFocus();
    }

    // Funcion para poder seleccionar los datos de la tabal pendientes
    public void transferDataPending() {
        jTablePendientes.addMouseListener(new MouseAdapter() {
            @Override
            // Obtenemos el evento del mouse
            public void mousePressed(MouseEvent Mouse_evt) {
                if (Mouse_evt.getClickCount() == 1) {
                    // Obtener datos de la fila seleccionada
                    jTxtTarea.setText(jTablePendientes.getValueAt(jTablePendientes.getSelectedRow(), 0).toString()); // Obtiene el valor de la columna tarea
                    jCboEstado.setSelectedItem(jTablePendientes.getValueAt(jTablePendientes.getSelectedRow(), 1).toString()); // Obtiene el valor de la columna estado
                    
                    // Cambiamos el estado de los botones
                    jBtnIngresar.setEnabled(false); 
                    jBtnActualizar.setEnabled(true);
                }
            }
        });
    }

    public void transferDataCompleted() {
        jTableCompletadas.addMouseListener(new MouseAdapter() {
            @Override
            // Obtenemos el evento del mouse
            public void mousePressed(MouseEvent Mouse_evt) {
                if (Mouse_evt.getClickCount() == 1) {
                    // Obtener datos de la fila seleccionada
                    jTxtTarea.setText(jTableCompletadas.getValueAt(jTableCompletadas.getSelectedRow(), 0).toString()); // Obtiene el valor de la columna tarea
                    jCboEstado.setSelectedItem(jTableCompletadas.getValueAt(jTableCompletadas.getSelectedRow(), 1).toString()); // Obtiene el valor de la columna estado
                    
                    // Cambiamos el estado de los botones
                    jBtnIngresar.setEnabled(false);
                    jBtnActualizar.setEnabled(true);
                }
            }
        });
    }

    // Clase para poder obtener un calor random de la tarea de la tabla pendientes
    public class TableUtils {

    public static void updateRandomValueFromFirstColumn(JTable table, StringBuilder randomValueHolder) {
        int rowCount = table.getRowCount();
        if (rowCount > 0) {
            int randomIndex = new Random().nextInt(rowCount);
            Object value = table.getValueAt(randomIndex, 0);
            if (value != null) {
                randomValueHolder.setLength(0); // Limpiamos el StringBuilder
                randomValueHolder.append(value.toString());
            }
        }
    }
}
    
    // Funcion que nos permite tener notificaciones del sistema
    private void startNotifications(final int interval) {
        Thread thread = new Thread(new Runnable() {
            public void run() {
                try {
                    while (true) {
                        Thread.sleep(interval);
                        SwingUtilities.invokeLater(new Runnable() {
                            public void run() {
                                //  variable para contener el valor aleatorio
                                StringBuilder randomValueHolder = new StringBuilder();

                                // Llamamos la clase para generar el valor del mensaje
                                TableUtils.updateRandomValueFromFirstColumn(jTableCompletadas, randomValueHolder);
                                
                                // cargamos el mensaje
                                mensaje = randomValueHolder.toString();
                                
                                // mandamos el mensaje
                                try {
                                    notificar.mje();
                                    } catch (Exception e) {
                                 }
                            }
                        });
                    }
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        });
        thread.start();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TareasPendientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new TareasPendientes().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton JBtnEliminar;
    private javax.swing.JButton jBtnActualizar;
    private javax.swing.JButton jBtnIngresar;
    private javax.swing.JButton jBtnNuevo;
    private javax.swing.JButton jBtnSalir;
    private javax.swing.JComboBox<String> jCboEstado;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableCompletadas;
    private javax.swing.JTable jTablePendientes;
    private javax.swing.JTextField jTxtTarea;
    // End of variables declaration//GEN-END:variables
}
